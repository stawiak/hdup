package com.os.exchange;

import com.os.exchange.json.DefaultJSONFactory;
import com.os.exchange.json.JSONException;
import com.os.exchange.json.JSONObject;
import com.os.exchange.json.JSONObjectSerializable;

import java.sql.Timestamp;

/**
 * Measurement transfer object
 * @author uwe
 */
public class MeasurementXO implements JSONObjectSerializable {

	public MeasurementXO() {
	}

	// @wurblet(fold=collapsed) methods DbMethods $mapping

	// <editor-fold defaultstate="collapsed" desc=" Code generated by wurblet. Do not edit! ">//GEN-BEGIN:methods


	/**
	 * Gets the db attribute value
	 *
	 * @return Measurement value(s)
	 */
	public String getValue()    {
		return value;
	}

	/**
	 * Sets the db attribute value
	 *
	 * @param value Measurement value(s)
	 */
	public void setValue(String value) {
		this.value = value;
	}

	/**
	 * Gets the db attribute timestamp
	 *
	 * @return When was the data created
	 */
	public Timestamp getTimestamp()    {
		return timestamp;
	}

	/**
	 * Sets the db attribute timestamp
	 *
	 * @param timestamp When was the data created
	 */
	public void setTimestamp(Timestamp timestamp) {
		this.timestamp = timestamp;
	}

	/**
	 * Gets the db attribute mac
	 *
	 * @return Device details (Proxy) MAC
	 */
	public long getMac()    {
		return mac;
	}

	/**
	 * Sets the db attribute mac
	 *
	 * @param mac Device details (Proxy) MAC
	 */
	public void setMac(long mac) {
		this.mac = mac;
	}

	/**
	 * Gets the db attribute name
	 *
	 * @return Name of the measurement (in lieu of a mac address)
	 */
	public String getName()    {
		return name;
	}

	/**
	 * Sets the db attribute name
	 *
	 * @param name Name of the measurement (in lieu of a mac address)
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the db attribute deviceSku
	 *
	 * @return Device SKU
	 */
	public String getDeviceSku()    {
		return deviceSku;
	}

	/**
	 * Sets the db attribute deviceSku
	 *
	 * @param deviceSku Device SKU
	 */
	public void setDeviceSku(String deviceSku) {
		this.deviceSku = deviceSku;
	}

	/**
	 * Gets the db attribute channelName
	 *
	 * @return Channel name
	 */
	public String getChannelName()    {
		return channelName;
	}

	/**
	 * Sets the db attribute channelName
	 *
	 * @param channelName Channel name
	 */
	public void setChannelName(String channelName) {
		this.channelName = channelName;
	}

	/**
	 * Gets the db attribute xferId
	 *
	 * @return The measurement id
	 */
	public long getXferId()    {
		return xferId;
	}

	/**
	 * Sets the db attribute xferId
	 *
	 * @param xferId The measurement id
	 */
	public void setXferId(long xferId) {
		this.xferId = xferId;
	}

	// </editor-fold>//GEN-END:methods

	// @wurblet(fold=collapsed) declare DbDeclare $mapping

	// <editor-fold defaultstate="collapsed" desc=" Code generated by wurblet. Do not edit! ">//GEN-BEGIN:declare


	/** Measurement value(s) **/
	private String value;

	/** When was the data created **/
	private Timestamp timestamp;

	/** Device details (Proxy) MAC **/
	private long mac;

	/** Name of the measurement (in lieu of a mac address) **/
	private String name;

	/** Device SKU **/
	private String deviceSku;

	/** Channel name **/
	private String channelName;

	/** The measurement id **/
	private long xferId;

	// </editor-fold>//GEN-END:declare

	// @wurblet(fold=collapsed) jsonSerialize OSJsonSerializer $mapping

	// <editor-fold defaultstate="collapsed" desc=" Code generated by wurblet. Do not edit! ">//GEN-BEGIN:jsonSerialize


	/**
	 * Convert this bean into a JSON compatible string.
	 * @return a json string
	 */
	public String toJSONString() {
		return toJSON().toString();
	}

	public JSONObject toJSON() {
		JSONObject jo = new JSONObject();
		try {
			jo.put("value", getValue());
			jo.put("timestamp", getTimestamp()==null?0:getTimestamp().getTime());
			jo.put("mac", getMac());
			jo.put("name", getName());
			jo.put("deviceSku", getDeviceSku());
			jo.put("channelName", getChannelName());
			jo.put("xferId", getXferId());
		} catch(JSONException ex) {
			// ignore
		}
		return jo;
	}

	/**
	 * Convert the fields in a JSON string to the fields in this bean.
	 * Note: any errors are silently ignored.
	 */
	public void fromJSON(JSONObject jo) {

		try {
			this.value = jo.optString("value", this.value);
			this.timestamp = new java.sql.Timestamp(jo.optLong("timestamp", this.timestamp==null?0:this.timestamp.getTime()));
			this.mac = jo.optLong("mac", this.mac);
			this.name = jo.optString("name", this.name);
			this.deviceSku = jo.optString("deviceSku", this.deviceSku);
			this.channelName = jo.optString("channelName", this.channelName);
			this.xferId = jo.optLong("xferId", this.xferId);
		} catch(Exception e) {
			// ignore
		}
	}

	/**
	 * Convert the fields in a JSON string to the fields in this bean.
	 * Note: any errors are silently ignored.
	 * @param jsonString is the JSON string
	 */
	public void fromJSONString(String jsonString) {
		try {
			JSONObject $jo = $jsonFac.jsonObject(jsonString);
			fromJSON($jo);
		} catch(Exception e) {
			// ignore
		}
	}

	/**
	 * Get the name of this class: "MeasurementXO"
	 * @return "MeasurementXO"
	 */
	public String getJSONObjectName() {
		return "MeasurementXO";
	}

	private static final DefaultJSONFactory $jsonFac = new DefaultJSONFactory();

	public final static String EXT_FIELD_VALUE = "value";
	public final static String EXT_FIELD_TIMESTAMP = "timestamp";
	public final static String EXT_FIELD_MAC = "mac";
	public final static String EXT_FIELD_NAME = "name";
	public final static String EXT_FIELD_DEVICESKU = "deviceSku";
	public final static String EXT_FIELD_CHANNELNAME = "channelName";
	public final static String EXT_FIELD_XFERID = "xferId";
	public final static String EXT_FIELD_ID = "id";
	// </editor-fold>//GEN-END:jsonSerialize

}
